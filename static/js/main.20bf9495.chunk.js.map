{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","inputString","setInputString","totalDaysTillNow","setTotalDaysTillNow","laggingHours","setLaggingHours","laggingMinutes","setLaggingMinutes","style","display","flexDirection","justifyContent","alignItems","Paper","elevation","className","type","name","value","onChange","e","target","rows","width","onClick","minutesLagging","arr","replaceAll","split","hours","minutes","forEach","el","tempString","Math","floor","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAwFeA,MApFf,WACE,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAgDF,qBAAhD,mBAAOG,EAAP,KAAyBC,EAAzB,KACA,EAAwCJ,mBAAS,GAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAA4CN,mBAAS,GAArD,mBAAOO,EAAP,KAAuBC,EAAvB,KA8BA,OACE,qBACEC,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,UALhB,SAQE,eAACC,EAAA,EAAD,CAAOC,UAAW,EAAGC,UAAU,eAA/B,UACE,oEACA,sBAAKA,UAAU,UAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,uBAAOA,UAAU,iBAAjB,wBACA,0BACEA,UAAU,WACVC,KAAK,OACLC,KAAK,cACLC,MAAOlB,EACPmB,SAAU,SAACC,GAAD,OAAOnB,EAAemB,EAAEC,OAAOH,QACzCI,KAAK,IACLC,MAAM,WAGV,sBAAKR,UAAU,gBAAf,UACE,uBAAOA,UAAU,iBAAjB,gCACA,uBACEA,UAAU,WACVC,KAAK,OACLC,KAAK,mBACLC,MAAOhB,EACPiB,SAAU,SAACC,GAAD,OAAOjB,EAAoBiB,EAAEC,OAAOH,aAGlD,qBAAKH,UAAU,kBAAf,SACE,wBAAQA,UAAU,gBAAgBS,QA/DnB,WACvB,GAAKxB,GAAgBE,EAArB,CAIA,IAIIuB,EAJAC,EAAM1B,EAAY2B,WAAW,IAAK,IAAIA,WAAW,KAAM,IAAIC,MAAM,OACjEC,EAAQ,EACRC,EAAU,EAIdJ,EAAIK,SAAQ,SAACC,GACX,IAAIC,EAAaD,EAAGJ,MAAM,QAC1BC,IAAUI,EAAW,GACjBA,EAAW,KAAIH,IAAYG,EAAW,OAG5CJ,GAASK,KAAKC,MAAML,EAAU,IAK9BL,EAAiB,IAJjBK,GAAoB,IAMpBzB,EAHewB,EAF6B,EAAnB3B,EAEmB,GAI5CK,EAAkBkB,QAvBhBW,MAAM,uBA6DA,4BAKJ,8BACE,mDACqBhC,EADrB,UAC0CE,EAD1C,mBCnEK+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.20bf9495.chunk.js","sourcesContent":["import { Paper } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [inputString, setInputString] = useState(\"\");\r\n  const [totalDaysTillNow, setTotalDaysTillNow] = useState();\r\n  const [laggingHours, setLaggingHours] = useState(0);\r\n  const [laggingMinutes, setLaggingMinutes] = useState(0);\r\n\r\n  const calculateHandler = () => {\r\n    if (!inputString || !totalDaysTillNow) {\r\n      alert(\"Provide all inputs\");\r\n      return;\r\n    }\r\n    let arr = inputString.replaceAll(\" \", \"\").replaceAll(\"\\t\", \"\").split(\"min\");\r\n    let hours = 0;\r\n    let minutes = 0;\r\n    let hoursLagging = 0;\r\n    let minutesLagging = 0;\r\n\r\n    arr.forEach((el) => {\r\n      let tempString = el.split(\"hrs,\");\r\n      hours += +tempString[0];\r\n      if (tempString[1]) minutes += +tempString[1];\r\n    });\r\n\r\n    hours += Math.floor(minutes / 60);\r\n    minutes = minutes % 60;\r\n    let totalExpectedHours = totalDaysTillNow * 9;\r\n    // if(hours > -1) {\r\n    hoursLagging = hours - totalExpectedHours + 1;\r\n    minutesLagging = 60 - minutes;\r\n    // }\r\n    setLaggingHours(hoursLagging);\r\n    setLaggingMinutes(minutesLagging);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <Paper elevation={3} className=\"my-container\">\r\n        <h1>Welcome to cis hours calculator...</h1>\r\n        <div className=\"my-form\">\r\n          <div className=\"my-form-group\">\r\n            <label className=\"my-input-label\">Paste here</label>\r\n            <textarea\r\n              className=\"my-input\"\r\n              type=\"text\"\r\n              name=\"inputString\"\r\n              value={inputString}\r\n              onChange={(e) => setInputString(e.target.value)}\r\n              rows=\"5\"\r\n              width=\"80%\"\r\n            />\r\n          </div>\r\n          <div className=\"my-form-group\">\r\n            <label className=\"my-input-label\">Total Working Days</label>\r\n            <input\r\n              className=\"my-input\"\r\n              type=\"text\"\r\n              name=\"totalDaysTillNow\"\r\n              value={totalDaysTillNow}\r\n              onChange={(e) => setTotalDaysTillNow(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"my-form-actions\">\r\n            <button className=\"my-submit-btn\" onClick={calculateHandler}>\r\n              Calculate\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <p>\r\n            Lagging/Ahead By: {laggingHours} Hrs : {laggingMinutes} mins\r\n          </p>\r\n        </div>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}